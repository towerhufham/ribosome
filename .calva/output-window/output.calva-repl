; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.0.0"] -- update-in :plugins conj [cider/cider-nrepl,"0.28.5"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> 
; Evaluating file: core.clj
#'user/GoL
clj꞉user꞉> 
#'user/random-board
clj꞉user꞉> 
(random-board)
{509 {:func #function[user/cell-grower], :dir [-1 1]}}
clj꞉user꞉> 
{34947 {:func #function[user/cell-grower], :dir [-1 -1]}}
clj꞉user꞉> 
#'user/random-board
clj꞉user꞉> 
(random-board)
{1343 {:func #function[user/cell-grower], :dir [0 -1]},
 3730 {:func #function[user/cell-grower], :dir [1 1]},
 20499 {:func #function[user/cell-grower], :dir [1 -1]}}
clj꞉user꞉> 
; Evaluating file: core.clj
#'user/GoL
clj꞉user꞉> 
Exception in  :draw  function:  #error {
 :cause Don't know how to create ISeq from: user$random_board
 :via
 [{:type java.lang.IllegalArgumentException
   :message Don't know how to create ISeq from: user$random_board
   :at [clojure.lang.RT seqFrom RT.java 557]}]
 :trace
 [[clojure.lang.RT seqFrom RT.java 557]
  [clojure.lang.RT seq RT.java 537]
  [clojure.core$seq__5402 invokeStatic core.clj 137]
  [clojure.core$seq__5402 invoke core.clj 137]
  [user$draw_state invokeStatic core.clj 108]
  [user$draw_state invoke core.clj 106]
  [clojure.lang.Var invoke Var.java 384]
  [quil.middlewares.fun_mode$wrap_draw_update$quil_draw__6405 invoke fun_mode.cljc 16]
  [quil.middlewares.safe_fns$wrap_fn$fn__260 invoke safe_fns.clj 8]
  [quil.middlewares.bind_output$bind_output$iter__298__302$fn__303$fn__318 invoke bind_output.clj 21]
  [quil.applet$_draw invokeStatic applet.clj 217]
  [quil.applet$_draw invoke applet.clj 215]
  [quil.Applet draw nil -1]
  [processing.core.PApplet handleDraw PApplet.java 2475]
  [quil.Applet handleDraw nil -1]
  [processing.awt.PSurfaceAWT$12 callDraw PSurfaceAWT.java 1547]
  [processing.core.PSurfaceNone$AnimationThread run PSurfaceNone.java 313]]} 
stacktrace:  java.lang.IllegalArgumentException: Don't know how to create ISeq from: user$random_board
 at clojure.lang.RT.seqFrom (RT.java:557)
    clojure.lang.RT.seq (RT.java:537)
    clojure.core$seq__5402.invokeStatic (core.clj:137)
    clojure.core/seq (core.clj:137)
    user$draw_state.invokeStatic (core.clj:108)
    user$draw_state.invoke (core.clj:106)
    clojure.lang.Var.invoke (Var.java:384)
    quil.middlewares.fun_mode$wrap_draw_update$quil_draw__6405.invoke (fun_mode.cljc:16)
    quil.middlewares.safe_fns$wrap_fn$fn__260.invoke (safe_fns.clj:8)
    quil.middlewares.bind_output$bind_output$iter__298__302$fn__303$fn__318.invoke (bind_output.clj:21)
    quil.applet$_draw.invokeStatic (applet.clj:217)
    quil.applet$_draw.invoke (applet.clj:215)
    quil.Applet.draw (:-1)
    processing.core.PApplet.handleDraw (PApplet.java:2475)
    quil.Applet.handleDraw (:-1)
    processing.awt.PSurfaceAWT$12.callDraw (PSurfaceAWT.java:1547)
    processing.core.PSurfaceNone$AnimationThread.run (PSurfaceNone.java:313)

Exception in  :draw  function:  #error {
 :cause Don't know how to create ISeq from: user$random_board
 :via
 [{:type java.lang.IllegalArgumentException
   :message Don't know how to create ISeq from: user$random_board
   :at [clojure.lang.RT seqFrom RT.java 557]}]
 :trace
 [[clojure.lang.RT seqFrom RT.java 557]
  [clojure.lang.RT seq RT.java 537]
  [clojure.core$seq__5402 invokeStatic core.clj 137]
  [clojure.core$seq__5402 invoke core.clj 137]
  [user$get_actions$iter__8777__8781$fn__8782 invoke core.clj 46]
  [clojure.lang.LazySeq sval LazySeq.java 42]
  [clojure.lang.LazySeq seq LazySeq.java 51]
  [clojure.lang.RT seq RT.java 535]
  [clojure.core$seq__5402 invokeStatic core.clj 137]
  [clojure.core$filter$fn__5893 invoke core.clj 2809]
  [clojure.lang.LazySeq sval LazySeq.java 42]
  [clojure.lang.LazySeq seq LazySeq.java 51]
  [clojure.lang.RT seq RT.java 535]
  [clojure.lang.LazilyPersistentVector create LazilyPersistentVector.java 44]
  [clojure.core$vec invokeStatic core.clj 377]
  [clojure.core$vec invoke core.clj 367]
  [user$get_actions invokeStatic core.clj 46]
  [user$get_actions invoke core.clj 45]
  [user$tick invokeStatic core.clj 63]
  [user$tick invoke core.clj 62]
  [user$update_state invokeStatic core.clj 104]
  [user$update_state invoke core.clj 103]
  [clojure.lang.Var invoke Var.java 384]
  [clojure.lang.Atom swap Atom.java 37]
  [clojure.core$swap_BANG_ invokeStatic core.clj 2352]
  [clojure.core$swap_BANG_ invoke core.clj 2345]
  [quil.middlewares.fun_mode$wrap_draw_update$quil_draw__6405 invoke fun_mode.cljc 13]
  [quil.middlewares.safe_fns$wrap_fn$fn__260 invoke safe_fns.clj 8]
  [quil.middlewares.bind_output$bind_output$iter__298__302$fn__303$fn__318 invoke bind_output.clj 21]
  [quil.applet$_draw invokeStatic applet.clj 217]
  [quil.applet$_draw invoke applet.clj 215]
  [quil.Applet draw nil -1]
  [processing.core.PApplet handleDraw PApplet.java 2475]
  [quil.Applet handleDraw nil -1]
  [processing.awt.PSurfaceAWT$12 callDraw PSurfaceAWT.java 1547]
  [processing.core.PSurfaceNone$AnimationThread run PSurfaceNone.java 313]]} 
stacktrace:  java.lang.IllegalArgumentException: Don't know how to create ISeq from: user$random_board
 at clojure.lang.RT.seqFrom (RT.java:557)
    clojure.lang.RT.seq (RT.java:537)
    clojure.core$seq__5402.invokeStatic (core.clj:137)
    clojure.core/seq (core.clj:137)
    user$get_actions$iter__8777__8781$fn__8782.invoke (core.clj:46)
    clojure.lang.LazySeq.sval (LazySeq.java:42)
    clojure.lang.LazySeq.seq (LazySeq.java:51)
    clojure.lang.RT.seq (RT.java:535)
    clojure.core$seq__5402.invokeStatic (core.clj:137)
    clojure.core$filter$fn__5893.invoke (core.clj:2809)
    clojure.lang.LazySeq.sval (LazySeq.java:42)
    clojure.lang.LazySeq.seq (LazySeq.java:51)
    clojure.lang.RT.seq (RT.java:535)
    clojure.lang.LazilyPersistentVector.create (LazilyPersistentVector.java:44)
    clojure.core$vec.invokeStatic (core.clj:377)
    clojure.core$vec.invoke (core.clj:367)
    user$get_actions.invokeStatic (core.clj:46)
    user$get_actions.invoke (core.clj:45)
    user$tick.invokeStatic (core.clj:63)
    user$tick.invoke (core.clj:62)
    user$update_state.invokeStatic (core.clj:104)
    user$update_state.invoke (core.clj:103)
    clojure.lang.Var.invoke (Var.java:384)
    clojure.lang.Atom.swap (Atom.java:37)
    clojure.core$swap_BANG_.invokeStatic (core.clj:2352)
    clojure.core$swap_BANG_.invoke (core.clj:2345)
    quil.middlewares.fun_mode$wrap_draw_update$quil_draw__6405.invoke (fun_mode.cljc:13)
    quil.middlewares.safe_fns$wrap_fn$fn__260.invoke (safe_fns.clj:8)
    quil.middlewares.bind_output$bind_output$iter__298__302$fn__303$fn__318.invoke (bind_output.clj:21)
    quil.applet$_draw.invokeStatic (applet.clj:217)
    quil.applet$_draw.invoke (applet.clj:215)
    quil.Applet.draw (:-1)
    processing.core.PApplet.handleDraw (PApplet.java:2475)
    quil.Applet.handleDraw (:-1)
    processing.awt.PSurfaceAWT$12.callDraw (PSurfaceAWT.java:1547)
    processing.core.PSurfaceNone$AnimationThread.run (PSurfaceNone.java:313)

Exception in  :draw  function:  #error {
 :cause Don't know how to create ISeq from: user$random_board
 :via
 [{:type java.lang.IllegalArgumentException
   :message Don't know how to create ISeq from: user$random_board
   :at [clojure.lang.RT seqFrom RT.java 557]}]
 :trace
 [[clojure.lang.RT seqFrom RT.java 557]
  [clojure.lang.RT seq RT.java 537]
  [clojure.core$seq__5402 invokeStatic core.clj 137]
  [clojure.core$seq__5402 invoke core.clj 137]
  [user$get_actions$iter__8777__8781$fn__8782 invoke core.clj 46]
  [clojure.lang.LazySeq sval LazySeq.java 42]
  [clojure.lang.LazySeq seq LazySeq.java 51]
  [clojure.lang.RT seq RT.java 535]
  [clojure.core$seq__5402 invokeStatic core.clj 137]
  [clojure.core$filter$fn__5893 invoke core.clj 2809]
  [clojure.lang.LazySeq sval LazySeq.java 42]
  [clojure.lang.LazySeq seq LazySeq.java 51]
  [clojure.lang.RT seq RT.java 535]
  [clojure.lang.LazilyPersistentVector create LazilyPersistentVector.java 44]
  [clojure.core$vec invokeStatic core.clj 377]
  [clojure.core$vec invoke core.clj 367]
  [user$get_actions invokeStatic core.clj 46]
  [user$get_actions invoke core.clj 45]
  [user$tick invokeStatic core.clj 63]
  [user$tick invoke core.clj 62]
  [user$update_state invokeStatic core.clj 104]
  [user$update_state invoke core.clj 103]
  [clojure.lang.Var invoke Var.java 384]
  [clojure.lang.Atom swap Atom.java 37]
  [clojure.core$swap_BANG_ invokeStatic core.clj 2352]
  [clojure.core$swap_BANG_ invoke core.clj 2345]
  [quil.middlewares.fun_mode$wrap_draw_update$quil_draw__6405 invoke fun_mode.cljc 13]
  [quil.middlewares.safe_fns$wrap_fn$fn__260 invoke safe_fns.clj 8]
  [quil.middlewares.bind_output$bind_output$iter__298__302$fn__303$fn__318 invoke bind_output.clj 21]
  [quil.applet$_draw invokeStatic applet.clj 217]
  [quil.applet$_draw invoke applet.clj 215]
  [quil.Applet draw nil -1]
  [processing.core.PApplet handleDraw PApplet.java 2475]
  [quil.Applet handleDraw nil -1]
  [processing.awt.PSurfaceAWT$12 callDraw PSurfaceAWT.java 1547]
  [processing.core.PSurfaceNone$AnimationThread run PSurfaceNone.java 313]]} 
stacktrace:  java.lang.IllegalArgumentException: Don't know how to create ISeq from: user$random_board
 at clojure.lang.RT.seqFrom (RT.java:557)
    clojure.lang.RT.seq (RT.java:537)
    clojure.core$seq__5402.invokeStatic (core.clj:137)
    clojure.core/seq (core.clj:137)
    user$get_actions$iter__8777__8781$fn__8782.invoke (core.clj:46)
    clojure.lang.LazySeq.sval (LazySeq.java:42)
    clojure.lang.LazySeq.seq (LazySeq.java:51)
    clojure.lang.RT.seq (RT.java:535)
    clojure.core$seq__5402.invokeStatic (core.clj:137)
    clojure.core$filter$fn__5893.invoke (core.clj:2809)
    clojure.lang.LazySeq.sval (LazySeq.java:42)
    clojure.lang.LazySeq.seq (LazySeq.java:51)
    clojure.lang.RT.seq (RT.java:535)
    clojure.lang.LazilyPersistentVector.create (LazilyPersistentVector.java:44)
    clojure.core$vec.invokeStatic (core.clj:377)
    clojure.core$vec.invoke (core.clj:367)
    user$get_actions.invokeStatic (core.clj:46)
    user$get_actions.invoke (core.clj:45)
    user$tick.invokeStatic (core.clj:63)
    user$tick.invoke (core.clj:62)
    user$update_state.invokeStatic (core.clj:104)
    user$update_state.invoke (core.clj:103)
    clojure.lang.Var.invoke (Var.java:384)
    clojure.lang.Atom.swap (Atom.java:37)
    clojure.core$swap_BANG_.invokeStatic (core.clj:2352)
    clojure.core$swap_BANG_.invoke (core.clj:2345)
    quil.middlewares.fun_mode$wrap_draw_update$quil_draw__6405.invoke (fun_mode.cljc:13)
    quil.middlewares.safe_fns$wrap_fn$fn__260.invoke (safe_fns.clj:8)
    quil.middlewares.bind_output$bind_output$iter__298__302$fn__303$fn__318.invoke (bind_output.clj:21)
    quil.applet$_draw.invokeStatic (applet.clj:217)
    quil.applet$_draw.invoke (applet.clj:215)
    quil.Applet.draw (:-1)
    processing.core.PApplet.handleDraw (PApplet.java:2475)
    quil.Applet.handleDraw (:-1)
    processing.awt.PSurfaceAWT$12.callDraw (PSurfaceAWT.java:1547)
    processing.core.PSurfaceNone$AnimationThread.run (PSurfaceNone.java:313)

#'user/random-board
clj꞉user꞉> 
(random-board)
{10544 {:func #function[user/cell-grower], :dir [1 0]},
 37910 {:func #function[user/cell-grower], :dir [1 -1]},
 25598 {:func #function[user/cell-grower], :dir [0 -1]},
 35382 {:func #function[user/cell-grower], :dir [0 -1]},
 2475 {:func #function[user/cell-grower], :dir [1 0]}}
clj꞉user꞉> 
; Evaluating file: core.clj
#'user/GoL
clj꞉user꞉> 
; Evaluating file: core.clj
#'user/GoL
clj꞉user꞉> 
#'user/apply-board-boarder
clj꞉user꞉> 
(apply-board-boarder test-board)
{0 {:func #function[user/cell-stationary], :dir [0 0]},
 39849 {:func #function[user/cell-stationary], :dir [0 0]},
 31800 {:func #function[user/cell-stationary], :dir [0 0]},
 20399 {:func #function[user/cell-stationary], :dir [0 0]},
 39840 {:func #function[user/cell-stationary], :dir [0 0]},
 12000 {:func #function[user/cell-stationary], :dir [0 0]},
 26200 {:func #function[user/cell-stationary], :dir [0 0]},
 18799 {:func #function[user/cell-stationary], :dir [0 0]},
 30599 {:func #function[user/cell-stationary], :dir [0 0]},
 16799 {:func #function[user/cell-stationary], :dir [0 0]},
 26600 {:func #function[user/cell-stationary], :dir [0 0]},
 39820 {:func #function[user/cell-stationary], :dir [0 0]},
 16000 {:func #function[user/cell-stationary], :dir [0 0]},
 39925 {:func #function[user/cell-stationary], :dir [0 0]},
 39942 {:func #function[user/cell-stationary], :dir [0 0]},
 39900 {:func #function[user/cell-stationary], :dir [0 0]},
 33200 {:func #function[user/cell-stationary], :dir [0 0]},
 39988 {:func #function[user/cell-stationary], :dir [0 0]},
 121 {:func #function[user/cell-stationary], :dir [0 0]},
 28799 {:func #function[user/cell-stationary], :dir [0 0]},
 22799 {:func #function[user/cell-stationary], :dir [0 0]},
 65 {:func #function[user/cell-stationary], :dir [0 0]},
 16600 {:func #function[user/cell-stationary], :dir [0 0]},
 24800 {:func #function[user/cell-stationary], :dir [0 0]},
 70 {:func #function[user/cell-stationary], :dir [0 0]},
 39852 {:func #function[user/cell-stationary], :dir [0 0]},
 6599 {:func #function[user/cell-stationary], :dir [0 0]},
 18000 {:func #function[user/cell-stationary], :dir [0 0]},
 28200 {:func #function[user/cell-stationary], :dir [0 0]},
 62 {:func #function[user/cell-stationary], :dir [0 0]},
 74 {:func #function[user/cell-stationary], :dir [0 0]},
 39873 {:func #function[user/cell-stationary], :dir [0 0]},
 29799 {:func #function[user/cell-stationary], :dir [0 0]},
 13999 {:func #function[user/cell-stationary], :dir [0 0]},
 39946 {:func #function[user/cell-stationary], :dir [0 0]},
 39826 {:func #function[user/cell-stationary], :dir [0 0]},
 5399 {:func #function[user/cell-stationary], :dir [0 0]},
 19999 {:func #function[user/cell-stationary], :dir [0 0]},
 10999 {:func #function[user/cell-stationary], :dir [0 0]},
 3000 {:func #function[user/cell-stationary], :dir [0 0]},
 39824 {:func #function[user/cell-stationary], :dir [0 0]},
 164 {:func #function[user/cell-stationary], :dir [0 0]},
 799 {:func #function[user/cell-stationary], :dir [0 0]},
 24400 {:func #function[user/cell-stationary], :dir [0 0]},
 39977 {:func #function[user/cell-stationary], :dir [0 0]},
 186 {:func #function[user/cell-stationary], :dir [0 0]},
 37799 {:func #function[user/cell-stationary], :dir [0 0]},
 39969 {:func #function[user/cell-stationary], :dir [0 0]},
 12799 {:func #function[user/cell-stationary], :dir [0 0]},
 25999 {:func #function[user/cell-stationary], :dir [0 0]},
 ...}
clj꞉user꞉> 
; Evaluating file: core.clj
#'user/GoL
clj꞉user꞉> 
; Evaluating file: core.clj
#'user/GoL
clj꞉user꞉> 
Exception in  :setup  function:  #error {
 :cause class user$random_board cannot be cast to class clojure.lang.IPersistentCollection (user$random_board is in unnamed module of loader clojure.lang.DynamicClassLoader @2b6d0235; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')
 :via
 [{:type java.lang.ClassCastException
   :message class user$random_board cannot be cast to class clojure.lang.IPersistentCollection (user$random_board is in unnamed module of loader clojure.lang.DynamicClassLoader @2b6d0235; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')
   :at [clojure.core$conj__5390 invokeStatic core.clj 82]}]
 :trace
 [[clojure.core$conj__5390 invokeStatic core.clj 82]
  [clojure.core$merge$fn__5958 invoke core.clj 3049]
  [clojure.core$reduce1 invokeStatic core.clj 944]
  [clojure.core$reduce1 invokeStatic core.clj 934]
  [clojure.core$merge invokeStatic core.clj 3048]
  [clojure.core$merge doInvoke core.clj 3041]
  [clojure.lang.RestFn invoke RestFn.java 421]
  [user$apply_board_boarder invokeStatic core.clj 92]
  [user$apply_board_boarder invoke core.clj 89]
  [user$setup invokeStatic core.clj 117]
  [user$setup invoke core.clj 111]
  [clojure.lang.Var invoke Var.java 380]
  [quil.middlewares.fun_mode$wrap_setup$fn__6400 invoke fun_mode.cljc 7]
  [quil.middlewares.safe_fns$wrap_fn$fn__260 invoke safe_fns.clj 8]
  [quil.middlewares.bind_output$bind_output$iter__298__302$fn__303$fn__318 invoke bind_output.clj 21]
  [quil.applet$_setup invokeStatic applet.clj 213]
  [quil.applet$_setup invoke applet.clj 205]
  [quil.Applet setup nil -1]
  [processing.core.PApplet handleDraw PApplet.java 2425]
  [quil.Applet handleDraw nil -1]
  [processing.awt.PSurfaceAWT$12 callDraw PSurfaceAWT.java 1547]
  [processing.core.PSurfaceNone$AnimationThread run PSurfaceNone.java 313]]} 
stacktrace:  java.lang.ClassCastException: class user$random_board cannot be cast to class clojure.lang.IPersistentCollection (user$random_board is in unnamed module of loader clojure.lang.DynamicClassLoader @2b6d0235; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')
 at clojure.core$conj__5390.invokeStatic (core.clj:82)
    clojure.core$merge$fn__5958.invoke (core.clj:3049)
    clojure.core$reduce1.invokeStatic (core.clj:944)
    clojure.core$reduce1.invokeStatic (core.clj:934)
    clojure.core$merge.invokeStatic (core.clj:3048)
    clojure.core$merge.doInvoke (core.clj:3041)
    clojure.lang.RestFn.invoke (RestFn.java:421)
    user$apply_board_boarder.invokeStatic (core.clj:92)
    user$apply_board_boarder.invoke (core.clj:89)
    user$setup.invokeStatic (core.clj:117)
    user$setup.invoke (core.clj:111)
    clojure.lang.Var.invoke (Var.java:380)
    quil.middlewares.fun_mode$wrap_setup$fn__6400.invoke (fun_mode.cljc:7)
    quil.middlewares.safe_fns$wrap_fn$fn__260.invoke (safe_fns.clj:8)
    quil.middlewares.bind_output$bind_output$iter__298__302$fn__303$fn__318.invoke (bind_output.clj:21)
    quil.applet$_setup.invokeStatic (applet.clj:213)
    quil.applet$_setup.invoke (applet.clj:205)
    quil.Applet.setup (:-1)
    processing.core.PApplet.handleDraw (PApplet.java:2425)
    quil.Applet.handleDraw (:-1)
    processing.awt.PSurfaceAWT$12.callDraw (PSurfaceAWT.java:1547)
    processing.core.PSurfaceNone$AnimationThread.run (PSurfaceNone.java:313)

; Evaluating file: core.clj
#'user/GoL
clj꞉user꞉> 
; Evaluating file: core.clj
#'user/GoL
clj꞉user꞉> 
(count-)#'user/count-neighbors
clj꞉user꞉> 
(count-neighbors test-board 0)
3
clj꞉user꞉> 
(count-neighbors test-board 777)
0
clj꞉user꞉> 
(count-neighbors test-board 3)
0
clj꞉user꞉> 
(count-neighbors test-board 2)
2
clj꞉user꞉> 
#'user/count-neighbors-of-func
clj꞉user꞉> 
(count-neighbors-of-func test-board 2 cell-grower)
2
clj꞉user꞉> 
(count-neighbors-of-func test-board 2 cell-stationary)
0
clj꞉user꞉> 
#'user/func-at-index
clj꞉user꞉> 
(func-at-index test-board 0)
#function[user/cell-grower]
clj꞉user꞉> 
(func-at-index test-board 70)
nil
clj꞉user꞉> 
